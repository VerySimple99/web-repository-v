HTTP : HyperText Transfer Protocol 
HTTPS : HTTP Secure -> 보안 http protocol , 암호화된 버전 

Web Server : HTTP 에 의거해 HTML(html,css,javascript) 문서document 를 서비스 하는 서버 
				웹 브라우저 클라이언트에 정적인 컨텐트를 서비스하는 서버
				 
Web Application Server ( WAS ) : Web Server + Web Container 			
										 데이터베이스 서버 및 타 서버와 연동 
										 다양한 비즈니스 로직을 처리하여 
										 동적인 컨텐트를 클라이언트에게 제공하는 웹 어플리케이션 서버 
										 
Web Container :  java web 기술인 Servlet 과 JSP 가 실행되는 환경을 제공 


- 우리는 현재 WAS 제품군 중에서 Apache Tomcat 9 를 사용한다 

- 자바 웹 어플리케이션 개발 환경 설정 
	1. tomcat/conf/server.xml 에서  port 를 변경 ,  get 요청 방식 한글처리를 위해 URIEncoding="utf-8"
	   을 명시 
	2.  tomcat/conf/context.xml 에서  reloadable="true" 을 줘서  java class 가 변경되어 컴파일 될 때 
		자동으로 서버에 배포되도록 설정 
		  
HTML : web document 컨텐트 담당
CSS : web document 디자인 스타일 담당
JavaScript : web document 행위 담당 

ECMAScript 표준을 준수하는 스크립트 언어 
ECMA 인터내셔널 : 정보 통신 표준을 제정하는 표준화 기구 

ES5 (ECMA5, 2009)	: 변수 선언 var -> 중복선언 가능 , Function level scope 		   
ES6 (ECMA6, 2015)  : 변수 선언 let -> 중복선언 불가 , Block level scope 
						   const 상수 , arrow function (화살표 함수) 등이 새롭게 추가 

서버가 웹문서를 응답하여 브라우저가 수신하면 						   
HTML을 읽는다 -> HTML 을 파싱한다 -> DOM Tree를 생성한다 
-> Render 트리가 생성(css와 결합)->브라우저에 표시된다					   	

DOM ( Document Object Model ) 
: javascript에서  web document 의 요소(element : 버튼, div, span ..)를 제어하기 위한 
  프로그래밍 인터페이스를 제공 
  웹브라우저 지원 
  HTML 문서(document) 요소를 계층적으로 지원 ( DOM Tree ) 
  하여  button, div , span 과 같은 요소들을 제어하고 조작하기 위한 함수를 제공 

Client Side :  html , css , javascript
Server Side : Servlet / JSP

**Servlet 기본 개념**
- Servlet :  java web programming 기반 기술 
			  MVC 의 Controller 역할을 담당 
			  java class 기반으로 개발
			  
 - JSP : Java Server Page , 동적으로 웹페이지를 제작하기 위한 템플릿 엔진 기술 
 		   MVC 의  View 역할을 담당 	
 		   html 기반으로 개발 		   

  - MVC (  Model2 Architecture 의 MVC 패턴 , Web MVC ) 
   	 Model :  비즈니스와 데이터 액세스 로직을 담당
   	 View : 응답을 전담, 클라이언트에게 동적인 화면을 제공  
     Controller : 제어자의 역할, 요청을 분석 , 모델과 연동 , 적절한 View 를 선택해 응답시킴


   - Http 요청 방식 request method   GET / POST 
   	 get 방식 : 정보 조회용 , url 에 정보가 노출 , 전송 용량에 제한
   	 
   	 post 방식 : 정보 전송용 , url 에 정보가 노출되지 않는다 ,
   	              http request body 영역에 저장되어 전송 , 용량에 제한 x 

  **내일 할 주요 목차**
  ==========토론============================================
  get 방식과 post 방식 특징 ==> 면접에 자주 나오므로 토론  :  Servlet  doGet() doPost() 
  query string 이란? 
  
  http response status code 404 ,405, 500,200 의미 ?
  Servlet 과 JSP가 무슨 차이? 
  =========================================================== 
   
  Servlet 과 Form 연동 
  HttpServletRequest 와 HttpServletResponse 
  어노테이션 기반 설정과 xml 기반 설정 
  Servlet LifeCycle ==> 미리 찾아보면 좋습니다 
  ServletConfig 와 ServletContext ==> 미리 찾아보면 좋습니다 
  Cookie 와 Session ==> 미리 찾아보면 좋습니다 


 **webstudy5-Servlet-Basic-xml-config**
 
 Java Web Application 설정 방식 
 1. xml 설정 방식 : WEB-INF\web.xml => DD ( Deployment Descriptor )
 					  설정과 코드가 분리 => 유지보수성 
 2. annotation 설정 방식 :  컴파일과 실행에 영향을 주는 의미있는 주석 
 							   소스 코드 상에 설정정보를 기술 => 생산성 
 	서블릿 3.0 에서 지원  						   
 							   
 1.  web.xml 설정의 예 
 <!--  어플리케이션으로 접속하면 제공될 기본 메인 화면    -->
  <welcome-file-list>
    <welcome-file>home.html</welcome-file>
  </welcome-file-list>
  <!--  xml 기반 서블릿 설정 --> 
  <servlet>
    <servlet-name>HelloServlet</servlet-name>
    <servlet-class>step1.HelloServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>HelloServlet</servlet-name>
    <url-pattern>/hi</url-pattern>
  </servlet-mapping>							   					  
                               
2. annotation 설정의 예 
					url-pattern 
@WebServlet("/hi")
public class HelloServlet extends HttpServlet{}

**webstudy6-Servlet-Form**
URL 
http://localhost:8888/webstudy6-Servlet-Form/GetMethodTestServlet?name=이강인&address=마요르카
--분석--
http : protocol 
localhost : domain name  ex) naver , daum, google 
8888 : port 
webstudy6-Servlet-Form : web application 명 / context path 
GetMethodTestServlet : web application 의 url pattern  웹프로그램 경로명 
? : 구분자 ( url-pattern 과 query string 을 구분 ) 
name=이강인&address=마요르카 : query string 
name 과 value 쌍으로 전달 
& : query string 여러개 보내기 위한 구분자 

참고) Servlet / JSP 에서는  request.getParameter(name) 으로 value를 리턴받는다 
**Query String**
url 주소로 클라이언트 데이터를 서버에 전달하는 방법 

** html form 과 Servlet 연동 **
Client Browser															Server ( Servlet or JSP )   
method : request method 요청방식 										@WebServlet(url-pattern)  or web.xml 
action : 처리할 서버 프로그램 url 										public void doPost(request,response){
<form method="post" action="url-pattern">                           String name=request.getParameter("userName");
<input type="text" name="userName">
<button type="submit">전송</button>									}
</form>

--------------------------------------------------------------------------------
Web Container 의 역할 :  Java Web Program(Servlet/JSP) 을 개발하고 실행하는 환경을 제공 
							 Servlet 과 JSP 의 LifeCycle(생명주기) 관리 
							 

- 서블릿 계층구조 ( Servlet Hierarchy)

최상위 인터페이스 
<<interface>> 
  Servlet  -  init() , service() , destroy()  와 같은 abstract method 가 선언되어져 있다
   
  implements  
<<abstract class>>
  GenericServlet - Servlet Interface를 implements 하는 abstract class  
  					  프로토콜에 독립적인 클래스 
  					  일반적인 서버 차원에서 가져야 하는 기능을 물려주고 
  					  자식 차원에서 구현해야 하는 service() 메서드는 abstract로 선언해
  					  구현을 강제한다 	
  extends 
 <<abstract class>>
  HttpServlet   - GenericServlet을 상속받는 abstract class
  					 Http Protocol 에 최적화된 멤버를 자식에게 물려준다 
  					 일반적으로 개발하는 Servlet 과 JSP ( 이후 Spring 의 DispatcherServlet )
  					 는 이 클래스를 상속받는다 
  					    
**Servlet API 설계방식의 특징**  					 
  : 일반적인 웹어플리케이션 개발 진영에서는  
    표준화된 Servlet API(ServletRequest,ServletResponse,HttpSession 등 ) 을 이용해 개발,
    실제 동작은 그 인터페이스들을 implements 한 WAS 의 
    다양한 제품군( ApacheTomcat, JBoss, WebLogic 등 ) 들이 동작된다 
    
    다양한 WAS 제품군들과 관계없이 표준화된 단일한 방법으로 자바 웹개발이 가능 -> 생산성 향상 
    구축된 Web Application 이 다른 WAS 로 배포되어도 영향이 최소화 -> 유지보수성 향상   					 
  					 

**Servlet LifeCycle**			
 서블릿(jsp) 의 생명 주기 , Web Container가 관리한다 
 대표적인 라이프 사이클 메서드는 최상위 인터페이스 Servlet 에 선언된 abstract method 
 init() -> service() -> destroy()
 
 init() :  web container로부터 ServletConfig 객체를 전달받음 ( ServletConfig 는 이후 공부예정 ) 
          현 서블릿의 초기화 작업을 담당  
          처음 서블릿 실행시 단 한번 호출되어 실행됨  
          
 service() : web container로부터  request, response 를 전달받아 실행 
			  client 요청시마다 매번 호출되어 실행됨 
			  
 destroy() : web container로부터 해당 서블릿이 해제or소멸 직전에 단 한번 호출되어 실행됨 
 
 예)   클라이언트가 검색을 위해 FindProductServlet 에 접속해 서비스를 제공받았다 
 	   100명의 클라이언트가 접속해 서비스 받았다고 가정하고 
 	   WAS 에 생성된 	FindProductServlet 의  
 	   객체수 : 1개
 	   init() : 1번
 	   service() -> doGet() or doPost() : 100번 
 	   destory() : WAS 종료 직전에 1번 실행 
 	   
 	  browser 				WAS
 	  
 	  client  --request-->   is loaded? --no-->   Servlet 객체 생성    
 	   								|						|
 	   								|					  init() 실행  : 단 한번 실행 
 	   							  yes 						|
 	   							    | 					    |
 	                                --------->      service() 실행 : 매 요청시마다 실행
 	                                                        |
 	   						<--response--------							
 
 								destroy() : WAS 종료 직전에 한번 실행 
 
 
**내일 할 주요 목차**
- ServletConfig , ServletContext , ServletContextListener 
- Cookie 와 Session 

**오늘 복습 사항**
면접 :  Servlet Life Cycle  ->  Servlet interface 의 라이프 사이클 관련 메서드 3개 설명 
									생성부터 소멸까지의 흐름을 설명 
공부 :  서블릿 계층 구조 
구현 :  form  과 서블릿 연동  webstudy6 의 step1 , step2 와 대응되는 서블릿을 잘 분석 									

 **LifeCycle 관련 설정**
 <load-on-startup>1</load-on-startup> 
 Servlet LifeCycle에 의해 특정 서블릿이 최초 요청될 때 해당 서블릿 객체 생성 후 
 init() 호출되어 초기화가 실행된 후 서비스 된다 
 시스템에서 중요한 역할을 수행하는 서블릿을 최초 요청시가 아니라 
 웹어플리케이션이 처음 실행될 때 객체 생성 및 init 실행되어 초기화 작업이 되도록 설정하는 것이 
  <load-on-startup>1</load-on-startup> 설정이다  
( 예 - 호텔이 오픈할때 중요한 역할을 하는 호텔프론트(서블릿)는 미리 초기화되어 
        고객이 오면 바로 서비스할 수 있도록 준비해야 한다 )  
 
 **ServletConfig와 ServletContext**
 ServletConfig : 서블릿 설정 정보 객체 
 				   서블릿 객체당 하나 생성
 				   init(ServletConfig) 이 웹컨테이너에 의해 호출되어 질 때 전달받음 
 				   ServletConfig는 ServletContext의 참조값을 내장하고 있음 
 				   또한 필요시 외부에서 해당 서블릿의 설정정보를 전달하고자 할 때 사용할 수 있음 
 				   ex)  서블릿 - 사원  ,  ServletConfig - 사원증 
 				   
 ServletContext : 웹어플리케이션내의 모든 웹프로그램들(Servlet or JSP)이 공유할 수 있는 객체 				   
 					 웹어플리케이션 당 하나 생성 
 					 Web Application 이 처음 시작될 때 ServletContext 객체가 생성되고 
 					 종료 직전에 ServletContext 객체가 소멸된다 
 					 

 **ServletContextListener**
 : Application LifeCycle Listener 
   웹어플리케이션 시작 시점과 종료 시점의 이벤트를 감지하여 
   시작 시점에 필요한 초기화 작업과 
   종료 시점에 필요한 작업을 정의해 실행할 수 있다    					 
 
ServletContextListener의 abstract method  					 
1. contextInitialized(ServletContextEvent sce)
    웹어플리케이션이 처음 시작되는 시점의 이벤트를 감지해 
    특정 작업을 수행할 수 있음 ==> 주로 Security 작업을 한다 
2. contextDestroyed(ServletContextEvent sce)							   							  
 	또한 웹어플리케이션이 종료 전에 이벤트를 감지해 
 	특정 작업을 수행할 수 있음 ==> 필요시 백업 및 로깅 작업을 한다  					 
 					 
**JSP 기본**

JSP : Java Server Page 
		서버 측에서 웹페이지를 동적으로 생성하는 기술 
		HTML에 자바 코드를 삽입하는 형식으로 개발 -> 동적인 웹페이지 구현에 적합
		Template Engine ( 자바 서버사이드 웹페이지 생성 기술 ) -> jsp , thymeleaf 등
		MVC 의  View 역할을 담당 		
		 					 
 JSP 기본 문법 
 1) JSP 주석  <%--   --%>
 2) Scriptlet 스크립틀릿 <%    %>    java code 삽입시 사용 , service계열 메서드 내에 코드로 삽입 
 3) Expression 출력  <%=  %>    out.print() 로 생성,  출력시 사용
 4) Declaration 선언 <%!  %>  멤버 변수 또는 메서드를 정의할때 사용 
 5) Directive 지시 <%@  %>  웹컨테이너에게 현 페이지의 정보를 알리는 역할( import , encoding , errorPage 등)
 
 -------------------------------------
 db 복습 
 정규화 
 Join ( Outer join ) 
 
 web 관련 복습 
 간단한 설명 연습 ( 예 ) 
 - get / post 
 - Servlet / jsp 
 - WAS  
 - Web Container 
 - Servlet LifeCycle 
 - ServletConfig / ServletContext / ServletContextListener 
 
 미리 예습한다면 
 - Cookie 와 HttpSession 
 
 **webstudy8-cookie-session**
 Cookie 와 Session 이 필요한 이유?  
 HTTP ( HyperText Transfer Protocol ) 는 Stateless 한 특징을 가지기 때문
 Stateless : 서버의 서비스를 받는 사용자 정보를 유지하지 않는 속성 
 
 HTTP 특성 : Stateless 
 				상태 유지하지 않는다 
 				접속한 사용자 정보를 유지하지 않는다 
 				많은 사용자에서 서비스해야 하는 서버는 
 				자원을 효과적으로 사용하기 위해 요청에 대한 응답이 되면 
 				연결을 해제하고 사용자 정보를 유지않도록 기본 설계되어 있다 
 
 사용자 정보를 필요시 유지해야 할 경우 ( 인증기반 커뮤니티 or SNS or 장바구니 or 주문,결제 등 )   
 Cookie 와 Session 과 같은 기술이 필요하다 
 
 Cookie 와 Session 과 같은 기술이 필요한 이유 ? 
 Http 는 Stateless 한 특성 , 즉 사용자 상태 정보를 유지하지 않는다 
 사용자 상태 정보를 유지해야 할 필요가 있을 때  cookie 와 session 과 같은 기술을 이용한다 
 
 세션관리 : 사용자 정보를 일정 조건동안 유지 
 
 상태정보 : 사용자의 의사 또는 어떤 자격을 가지는 지에 대한 정보 
 			 ( ex - 오늘 하루 팝업창을 보지 않겠다는 의사 ,  네이버 카페에 로그인하여 회원 자격이 있는 사용자 )
 			  
 
 사용자 정보를 유지하는 방식 중 
 1. Cookie 
 	클라이언트 측에 상태 정보를 저장 
 	저장 용량에 제한 ( 4kb ) 
 	저장 데이터 타입의 제한 -> 문자열만 가능 
 	
 	Cookie 생성시 유효시간을 설정 , 
 	유효시간을 설정하지 않으면 해당 브라우저 실행시까지만 유효 
 	
 	step1. 클라이언트가 접속하면 SetCookieServlet이  쿠키 생성해 응답시에 전달해 클라이언트 측에 저장시킴
 	
 										WAS 
 	client browser --request-->   SetCookieServlet
 										Cookie 생성 (name,value)
 										cookie.setMaxAge(30); // 30초간 쿠키가 유효 
 										response.addCookie(cookie);
 					 <--response-- 
 					 
 	step2.  클라이언트가 접속하면 	GetCookieServlet이 실행 ,  request로부터 cookie 정보를 가져와 
 			 SetCookieServlet에서 저장한 쿠키 정보를 화면에 출력해본다 			 
 					 					WAS	
 	client browser --request-->   GetCookieServlet
 										request.getCookies() : Cookie[] 
 										cookies[i].getName() / cookies[i].getValue() 를 이용해 쿠키 정보 출력 				 
 					 <--response--
 		
 2. Session(HttpSession)
    서버 측에 사용자 상태 정보를 저장 
    저장 용량 및 데이터 타입에 제한이 없다
    로그인, 로그아웃시 주로 세션이 이용된다 ( 세션은 내부적으로 쿠키를 이용한다 ) 
    
    세션 유효시간 
    1. WAS 에서 설정된 지정 유효시간 내에 재접속이 없을 때 세션 만료  
    2. 브라우저 종료시 세션 만료 
    3. 로그아웃 실행시 세션 만료 
 
    세션 관련 주요 메서드 
    - request.getSession() or request.getSession(true) 
      기존 세션이 있으면 기존 세션을 반환하고 
      없으면 새로 생성해 반환 
    
    - request.getSession(false) 
      기존 세션이 있으면 기존 세션을 반환하고 
      없으면 null 반환    
 
    - session.setAttribute(name,value); 
      세션에 저장할 정보를 name과 value 쌍으로 저장 
    
    - session.getAttribute(name) : Object 
      세션에 저장된 정보를 name으로 반환 
      
    - session.invalidate(); 
      세션을 무효화 시킬때 사용  ( 로그아웃시 사용 )   
      
    - Session 과 Cookie의 관계 
    세션은 내부적으로 jsessionid 라는 쿠키를 사용 
    								 LoginServlet
    client browser --request--> request.getSession();  세션 생성  
      				 
      				 
      				 <--response--
      	jsessionid name cookie가 저장 
     
     재접속 							CafeServlet
     client browser --request-->  	request.getSession(false) 
      									: getSession 메서드 내부에서 client측의 
      									  jsessionid cookie를 확인해서 
      									  해당 Session 이 서버에 존재하는 지 여부에 따라
      									  존재하면 기존 세션 반환 
      									  존재하지 않으면 null 반환 
      									  
      									  	
      				 
      
      
      
      
      
        
      
      
      
      
      
      
      
      
      
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 					 
 					 
 					 
 					 
 					 
 					 
 					 
 					 
 
--재사용할 서블릿 코드--
response.setContentType("text/html;charset=utf-8");
PrintWriter out=response.getWriter();
out.print("<html>");
out.print("<body bgcolor=yellow>");
out.print("<h4>");
out.print("</h4>");
out.print("</body>");
out.print("</html>");
out.close(); 
 
 
 
   













	