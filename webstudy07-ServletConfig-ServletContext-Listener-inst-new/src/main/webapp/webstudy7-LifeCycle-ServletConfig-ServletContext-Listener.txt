HTTP : HyperText Transfer Protocol 
HTTPS : HTTP Secure -> 보안 http protocol , 암호화된 버전 

Web Server : HTTP 에 의거해 HTML(html,css,javascript) 문서document 를 서비스 하는 서버 
				웹 브라우저 클라이언트에 정적인 컨텐트를 서비스하는 서버
				 
Web Application Server ( WAS ) : Web Server + Web Container 			
										 데이터베이스 서버 및 타 서버와 연동 
										 다양한 비즈니스 로직을 처리하여 
										 동적인 컨텐트를 클라이언트에게 제공하는 웹 어플리케이션 서버 
										 
Web Container :  java web 기술인 Servlet 과 JSP 가 실행되는 환경을 제공 


- 우리는 현재 WAS 제품군 중에서 Apache Tomcat 9 를 사용한다 

- 자바 웹 어플리케이션 개발 환경 설정 
	1. tomcat/conf/server.xml 에서  port 를 변경 ,  get 요청 방식 한글처리를 위해 URIEncoding="utf-8"
	   을 명시 
	2.  tomcat/conf/context.xml 에서  reloadable="true" 을 줘서  java class 가 변경되어 컴파일 될 때 
		자동으로 서버에 배포되도록 설정 
		  
HTML : web document 컨텐트 담당
CSS : web document 디자인 스타일 담당
JavaScript : web document 행위 담당 

ECMAScript 표준을 준수하는 스크립트 언어 
ECMA 인터내셔널 : 정보 통신 표준을 제정하는 표준화 기구 

ES5 (ECMA5, 2009)	: 변수 선언 var -> 중복선언 가능 , Function level scope 		   
ES6 (ECMA6, 2015)  : 변수 선언 let -> 중복선언 불가 , Block level scope 
						   const 상수 , arrow function (화살표 함수) 등이 새롭게 추가 

서버가 웹문서를 응답하여 브라우저가 수신하면 						   
HTML을 읽는다 -> HTML 을 파싱한다 -> DOM Tree를 생성한다 
-> Render 트리가 생성(css와 결합)->브라우저에 표시된다					   	

DOM ( Document Object Model ) 
: javascript에서  web document 의 요소(element : 버튼, div, span ..)를 제어하기 위한 
  프로그래밍 인터페이스를 제공 
  웹브라우저 지원 
  HTML 문서(document) 요소를 계층적으로 지원 ( DOM Tree ) 
  하여  button, div , span 과 같은 요소들을 제어하고 조작하기 위한 함수를 제공 

Client Side :  html , css , javascript
Server Side : Servlet / JSP

**Servlet 기본 개념**
- Servlet :  java web programming 기반 기술 
			  MVC 의 Controller 역할을 담당 
			  java class 기반으로 개발
			  
 - JSP : Java Server Page , 동적으로 웹페이지를 제작하기 위한 템플릿 엔진 기술 
 		   MVC 의  View 역할을 담당 	
 		   html 기반으로 개발 		   

  - MVC (  Model2 Architecture 의 MVC 패턴 , Web MVC ) 
   	 Model :  비즈니스와 데이터 액세스 로직을 담당
   	 View : 응답을 전담, 클라이언트에게 동적인 화면을 제공  
     Controller : 제어자의 역할, 요청을 분석 , 모델과 연동 , 적절한 View 를 선택해 응답시킴


   - Http 요청 방식 request method   GET / POST 
   	 get 방식 : 정보 조회용 , url 에 정보가 노출 , 전송 용량에 제한
   	 
   	 post 방식 : 정보 전송용 , url 에 정보가 노출되지 않는다 ,
   	              http request body 영역에 저장되어 전송 , 용량에 제한 x 

  **내일 할 주요 목차**
  ==========토론============================================
  get 방식과 post 방식 특징 ==> 면접에 자주 나오므로 토론  :  Servlet  doGet() doPost() 
  query string 이란? 
  
  http response status code 404 ,405, 500,200 의미 ?
  Servlet 과 JSP가 무슨 차이? 
  =========================================================== 
   
  Servlet 과 Form 연동 
  HttpServletRequest 와 HttpServletResponse 
  어노테이션 기반 설정과 xml 기반 설정 
  Servlet LifeCycle ==> 미리 찾아보면 좋습니다 
  ServletConfig 와 ServletContext ==> 미리 찾아보면 좋습니다 
  Cookie 와 Session ==> 미리 찾아보면 좋습니다 


 **webstudy5-Servlet-Basic-xml-config**
 
 Java Web Application 설정 방식 
 1. xml 설정 방식 : WEB-INF\web.xml => DD ( Deployment Descriptor )
 					  설정과 코드가 분리 => 유지보수성 
 2. annotation 설정 방식 :  컴파일과 실행에 영향을 주는 의미있는 주석 
 							   소스 코드 상에 설정정보를 기술 => 생산성 
 	서블릿 3.0 에서 지원  						   
 							   
 1.  web.xml 설정의 예 
 <!--  어플리케이션으로 접속하면 제공될 기본 메인 화면    -->
  <welcome-file-list>
    <welcome-file>home.html</welcome-file>
  </welcome-file-list>
  <!--  xml 기반 서블릿 설정 --> 
  <servlet>
    <servlet-name>HelloServlet</servlet-name>
    <servlet-class>step1.HelloServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>HelloServlet</servlet-name>
    <url-pattern>/hi</url-pattern>
  </servlet-mapping>							   					  
                               
2. annotation 설정의 예 
					url-pattern 
@WebServlet("/hi")
public class HelloServlet extends HttpServlet{}

**webstudy6-Servlet-Form**
URL 
http://localhost:8888/webstudy6-Servlet-Form/GetMethodTestServlet?name=이강인&address=마요르카
--분석--
http : protocol 
localhost : domain name  ex) naver , daum, google 
8888 : port 
webstudy6-Servlet-Form : web application 명 / context path 
GetMethodTestServlet : web application 의 url pattern  웹프로그램 경로명 
? : 구분자 ( url-pattern 과 query string 을 구분 ) 
name=이강인&address=마요르카 : query string 
name 과 value 쌍으로 전달 
& : query string 여러개 보내기 위한 구분자 

참고) Servlet / JSP 에서는  request.getParameter(name) 으로 value를 리턴받는다 
**Query String**
url 주소로 클라이언트 데이터를 서버에 전달하는 방법 

** html form 과 Servlet 연동 **
Client Browser															Server ( Servlet or JSP )   
method : request method 요청방식 										@WebServlet(url-pattern)  or web.xml 
action : 처리할 서버 프로그램 url 										public void doPost(request,response){
<form method="post" action="url-pattern">                           String name=request.getParameter("userName");
<input type="text" name="userName">
<button type="submit">전송</button>									}
</form>

--------------------------------------------------------------------------------
Web Container 의 역할 :  Java Web Program(Servlet/JSP) 을 개발하고 실행하는 환경을 제공 
							 Servlet 과 JSP 의 LifeCycle(생명주기) 관리 
							 

- 서블릿 계층구조 ( Servlet Hierarchy)

최상위 인터페이스 
<<interface>> 
  Servlet  -  init() , service() , destroy()  와 같은 abstract method 가 선언되어져 있다
   
  implements  
<<abstract class>>
  GenericServlet - Servlet Interface를 implements 하는 abstract class  
  					  프로토콜에 독립적인 클래스 
  					  일반적인 서버 차원에서 가져야 하는 기능을 물려주고 
  					  자식 차원에서 구현해야 하는 service() 메서드는 abstract로 선언해
  					  구현을 강제한다 	
  extends 
 <<abstract class>>
  HttpServlet   - GenericServlet을 상속받는 abstract class
  					 Http Protocol 에 최적화된 멤버를 자식에게 물려준다 
  					 일반적으로 개발하는 Servlet 과 JSP ( 이후 Spring 의 DispatcherServlet )
  					 는 이 클래스를 상속받는다 
  					    
**Servlet 아키텍쳐의 특징**  					 
  : 일반적인 웹어플리케이션 개발 진영에서는  
    표준화된 Servlet API(ServletRequest,ServletResponse,HttpSession 등 ) 을 이용해 개발,
    실제 동작은 그 인터페이스들을 implements 한 WAS 의 
    다양한 제품군( ApacheTomcat, JBoss, WebLogic 등 ) 들이 동작된다 
    
    다양한 WAS 제품군들과 관계없이 표준화된 단일한 방법으로 자바 웹개발이 가능 -> 생산성 향상 
    구축된 Web Application 이 다른 WAS 로 배포되어도 영향이 최소화 -> 유지보수성 향상   					 

/**********************************************************************************/ 				
  					    
**서블릿 아키텍처의 핵심 특징**  		
1.  표준화된 API (인터페이스 기반 개발) 📚
      개발자는 Servlet, ServletRequest, ServletResponse, HttpSession 등 
      Java EE(Jakarta EE) 표준으로 정의된 인터페이스들을 사용하여 웹 애플리케이션을 개발합니다.
      이 표준화된 API 덕분에 특정 WAS 제품에 종속되지 않고, 
     일관된 방식으로 웹 애플리케이션을 구현할 수 있습니다.			 
2 . WAS (Web Application Server) 의 구현 및 추상화 ⚙️
      Apache Tomcat, JBoss(WildFly), WebLogic, Jetty 등과 같은 WAS 제품들은 
      이 표준화된 Servlet API 인터페이스들을 **각자의 방식으로 구현(implements)**합니다.
3. 벤더 독립성 및 이식성 🔄
    이러한 구조 덕분에, 특정 WAS에서 개발된 웹 애플리케이션은 
    **다른 WAS에서도 큰 수정 없이 동작할 수 있는 높은 이식성(Portability)**을 가집니다.
     기업은 특정 벤더에 종속되지 않고, 필요에 따라 다양한 WAS 제품을 선택하거나 변경할 수 있는 유연성을 확보하게 됩니다.

결론적으로, 서블릿 아키텍처는 표준 인터페이스를 통한 개발과 WAS의 구체적인 구현 분리를 통해 
개발의 용이성, 생산성, 이식성, 그리고 유연성을 제공하는 강력한 모델입니다. 👍
이러한 구조는 웹 애플리케이션 개발 분야에서 자바가 오랫동안 견고한 위치를 유지할 수 있었던 중요한 이유

개발자는 WAS의 내부 구현 방식까지 알 필요 없이, 
표준 API만 사용하면 되므로 개발 복잡성이 줄어들고 생산성이 향상됩니다.

다양한 WAS 제품군들과 관계없이 표준화된 단일한 방법으로 자바 웹개발이 가능 -> 생산성 향상 
구축된 Web Application 이 다른 WAS 로 배포되어도 영향이 최소화 -> 유지보수성 향상   					 
  					 

/********************************/
소프트웨어 디자인 패턴 : IOC 
IOC (제어의 역전) 💡
IOC는 이러한 전통적인 방식의 제어권을 뒤집습니다. 즉, 객체가 자신의 의존성을 직접 생성하거나 관리하는 것이 아니라, 
외부(컨테이너, 프레임워크 등)에서 객체의 의존성을 대신 생성하고 관리하며, 필요할 때 객체에게 주입해주는 방식입니다.

핵심 개념 요약:

누가 제어하는가?: 객체 자신이 아닌, **외부 컨테이너(또는 프레임워크)**가 
객체의 생명 주기(생성, 초기화, 소멸)와 의존성 관리를 제어합니다.

무엇이 역전되는가?:

객체 생성 및 관리의 제어권: 객체 자신이 new 키워드로 자신이나 다른 객체를 생성하는 것이 아니라, 
컨테이너가 대신 생성하고 관리합니다. (예: 웹 컨테이너가 서블릿 객체를 생성하는 것)

의존성 해결의 제어권: 객체가 필요로 하는 의존성(다른 객체, 설정 값 등)을 직접 찾아오는 것이 아니라, 
컨테이너가 해당 의존성을 만들어서 객체에게 "주입"해 줍니다. 
(예: ServletConfig나 HttpServletRequest/Response를 init() 또는 service() 메서드의 매개변수로 받는 것)

느슨한 결합(Loose Coupling): 객체들이 서로의 구체적인 구현에 직접적으로 의존하지 않게 되어, 
코드 변경 시 파급 효과가 줄어듭니다.
유지보수성 향상: 코드의 복잡성이 줄어들고, 
변경에 유연하게 대응할 수 있어 유지보수가 쉬워집니다.

높은 재사용성: 객체들이 독립적으로 설계되므로, 
다양한 환경에서 재사용하기 용이합니다.

용이한 테스트: 의존성을 외부에서 주입받으므로, 단위 테스트 시 Mock 객체 등을 
쉽게 주입하여 테스트 환경을 구축할 수 있습니다.

/*******************************/
**Servlet LifeCycle**			
서블릿은 개발자가 직접 객체를 생성하거나 소멸시키지 않고, 
웹 컨테이너에 의해 그 생명 주기가 전적으로 관리됩니다.

서블릿 생명주기란?
서블릿이 생성되어 소멸될 때까지의 전체 과정입니다. 
마치 사람의 일생처럼, 태어나고(생성), 살아가고(서비스), 죽는(소멸) 단계가 있습니다.
 대표적인 라이프 사이클 메서드는 최상위 인터페이스 Servlet 에 선언된 abstract method 
 init() -> service() -> destroy()

### 실생활 비유: 식당 운영
- **init()**: 식당 개업 준비 (인테리어, 직원 교육, 메뉴 준비)
- **service()**: 손님 서빙 (주문 받고, 요리하고, 서빙하기)
- **destroy()**: 식당 폐업 (정리, 직원 정산, 임대 반납)

### IT 개발 현장에서의 활용
현재 **Spring Framework**에서도 Bean LifeCycle로 동일한 개념이 적용됩니다. 
`@PostConstruct`, `@PreDestroy` 어노테이션이 서블릿의 init(), destroy()와 같은 역할을 합니다.

## 서블릿 생명주기 상세 분석
### 1단계: 로딩 및 인스턴스화 (Loading & Instantiation)
         클라이언트 요청 → 서블릿 컨테이너가 해당 서블릿 클래스 로딩 → 인스턴스 생성
         - **언제**: 첫 번째 요청이 들어올 때 (또는 서버 시작 시)
          - **특징**: **단 한 번만** 실행됨
          서블릿 싱글톤
          - **결과**: 서블릿 객체가 메모리에 생성됨

### 2단계: 초기화 (Initialization)
```java
public void init(ServletConfig config) throws ServletException

```
- **언제**: 인스턴스 생성 직후, **단 한 번만** 실행
- **목적**: 서블릿이 서비스하기 전 필요한 초기 작업 수행
- **활용**: 데이터베이스 연결, 파일 로딩, 설정 읽기 등

### 3단계: 서비스 (Service)
```java
protected void service(HttpServletRequest req, HttpServletResponse resp)

```
- **언제**: **매 요청마다** 실행
- **특징**: 멀티스레드 환경에서 동시 실행 가능
- **역할**: 실제 요청 처리 (doGet, doPost 호출)
### 소멸 (Destruction)

```java
public void destroy()

```
- **언제**: 서블릿 컨테이너 종료 시 또는 서블릿 언로드 시
- **목적**: 리소스 정리 및 정리 작업
- **활용**: 데이터베이스 연결 해제, 파일 닫기, 캐시 정리 등
 
 
 **정리**
 
 서블릿 클래스 로딩 및 인스턴스화 


  					 

**Servlet LifeCycle**			
 서블릿(jsp) 의 생명 주기 , Web Container가 관리한다 
 대표적인 라이프 사이클 메서드는 최상위 인터페이스 Servlet 에 선언된 abstract method 
 init() -> service() -> destroy()
 
 init() :  web container로부터 ServletConfig 객체를 전달받음 ( ServletConfig 는 이후 공부예정 ) 
          현 서블릿의 초기화 작업을 담당  
          처음 서블릿 실행시 단 한번 호출되어 실행됨  
          
 service() : web container로부터  request, response 를 전달받아 실행 
			  client 요청시마다 매번 호출되어 실행됨 
			  
 destroy() : web container로부터 해당 서블릿이 해제or소멸 직전에 단 한번 호출되어 실행됨 
 
 예)   클라이언트가 검색을 위해 FindProductServlet 에 접속해 서비스를 제공받았다 
 	   100명의 클라이언트가 접속해 서비스 받았다고 가정하고 
 	   WAS 에 생성된 	FindProductServlet 의  
 	   객체수 : 1개
 	   init() : 1번
 	   service() -> doGet() or doPost() : 100번 
 	   destory() : WAS 종료 직전에 1번 실행 
 	   
 	  browser 				WAS
 	  
 	  client  --request-->   is loaded? --no-->   Servlet 객체 생성    
 	   								|						|
 	   								|					  init() 실행  : 단 한번 실행 
 	   							  yes 						|
 	   							    | 					    |
 	                                --------->      service() 실행 : 매 요청시마다 실행
 	                                                        |
 	   						<--response--------							
 
 								destroy() : WAS 종료 직전에 한번 실행 
 
 
**내일 할 주요 목차**
- ServletConfig , ServletContext , ServletContextListener 
- Cookie 와 Session 

**오늘 복습 사항**
면접 :  Servlet Life Cycle  ->  Servlet interface 의 라이프 사이클 관련 메서드 3개 설명 
									생성부터 소멸까지의 흐름을 설명 
공부 :  서블릿 계층 구조 
구현 :  form  과 서블릿 연동  webstudy6 의 step1 , step2 와 대응되는 서블릿을 잘 분석 									



 
 **ServletConfig와 ServletContext**
 
 ### ServletConfig의 핵심 역할
 서블릿 설정 정보 객체 
 서블릿 객체당 하나 생성
init(ServletConfig) 이 웹컨테이너에 의해 호출되어 질 때 전달받음 
1. **개별 서블릿의 초기화 매개변수** 제공
2. **서블릿 이름** 정보 제공
3. **ServletContext 참조** 제공
 ex)  서블릿 - 사원  ,  ServletConfig - 사원증 
 
 ### ServletContext의 핵심 역할
웹어플리케이션내의 모든 웹프로그램들(Servlet or JSP)이 공유할 수 있는 객체 				   
  웹어플리케이션 당 하나 생성 
 Web Application 이 처음 시작될 때 ServletContext 객체가 생성되고 
 종료 직전에 ServletContext 객체가 소멸된다
1. **웹 애플리케이션 전체 설정** 관리
2. **서블릿 간 데이터 공유** 지원
3. **웹 애플리케이션 메타데이터** 제공
		
	   
 ServletContext :  
 
 구분	           ServletConfig	                        ServletContext
범위	          개별 서블릿 전용	                        웹 애플리케이션 전체 공유
생명주기	 서블릿과 동일	                            웹 애플리케이션과 동일
설정 위치	  @WebInitParam 또는 web.xml	web.xml의 <context-param>
접근 방법	    getInitParameter()	             getInitParameter()
Spring 연관	개별 Bean 설정	                       ApplicationContext
 
 ### 실생활 비유: 아파트 생활

**ServletConfig = 개인 방의 설정**

- 각 방마다 다른 온도 설정
- 개인 취향에 맞는 인테리어
- 방 주인만 변경 가능

**ServletContext = 아파트 공용 설정**

- 전체 아파트의 난방 시스템
- 공용 와이파이 비밀번호
- 모든 세대가 공유하는 정보				

Spring Framework와의 연관성
// ServletContext → Spring ApplicationContext
// 웹 애플리케이션 전체에서 공유되는 Bean 컨테이너

// ServletConfig → Spring @Configuration
// 개별 컴포넌트의 설정 정보

	 

 **ServletContextListener**
 : Application LifeCycle Listener 
   웹어플리케이션 시작 시점과 종료 시점의 이벤트를 감지하여 
   시작 시점에 필요한 초기화 작업과 
   종료 시점에 필요한 작업을 정의해 실행할 수 있다    					 
 
ServletContextListener의 abstract method  					 
1. contextInitialized(ServletContextEvent sce)
    웹어플리케이션이 처음 시작되는 시점의 이벤트를 감지해 
    특정 작업을 수행할 수 있음 ==> 주로 Security 작업을 한다 
2. contextDestroyed(ServletContextEvent sce)							   							  
 	또한 웹어플리케이션이 종료 전에 이벤트를 감지해 
 	특정 작업을 수행할 수 있음 ==> 필요시 백업 및 로깅 작업을 한다  					 
 					 
 ServletContextListener의 핵심 개념 💡
ServletContextListener는 자바 웹 애플리케이션에서 웹 애플리케이션의 시작(startup)과 종료(shutdown) 시점을 감지하고 특정 작업을 수행할 수 있도록 해주는 특별한 인터페이스입니다. 마치 웹 애플리케이션의 탄생과 소멸을 지켜보는 감시자(Listener)라고 생각하시면 됩니다.					 
 					 
 					 
 					 
 					 
 					 
 					 
 					 
 					 
 
--재사용할 서블릿 코드--
response.setContentType("text/html;charset=utf-8");
PrintWriter out=response.getWriter();
out.print("<html>");
out.print("<body bgcolor=yellow>");
out.print("<h4>");
out.print("</h4>");
out.print("</body>");
out.print("</html>");
out.close(); 
 
 
 
   













	